BSort: THEORY
BEGIN

IMPORTING complexity
IMPORTING bubblesort

cbubbling(lc:[list[nat],nat], (n : below[ lc`length])) : RECURSIVE  [list[nat],nat] =
  CASES lc`1 OF
    cons(h,tl):
      IF n = 0 THEN lc
      ELSIF h > car(tl)
      THEN LET lcaux = cbubbling((cons(h,cdr(tl)), lc`2), n-1) IN
      (cons(car(tl), lcaux`1),lcaux`2 + 1)
      ELSE LET lcaux = cbubbling((tl, lc`2), n-1) IN
      (cons(h, lcaux`1),lcaux`2 + 1)
      ENDIF
  ENDCASES
  MEASURE n

bubbling_cbubbling_equiv: LEMMA
  FORALL (n:nat) (l:list[nat]):
  bubbling(l) = cbubbling(l,n)`1

cbubbling_length: LEMMA
  FORALL (l:list[nat]): length(cbubbling(l)`1) = length(l)

cbubblesort_aux(lc:[list[nat],nat], (n : below[l`length ] )) : RECURSIVE [list[nat],nat] =
  IF n = 0 THEN lc
  ELSE cbubblesort_aux(cbubbling(lc,n), n-1)
  ENDIF
  MEASURE n

cbubble_sort(l: list[nat]) : [list[nat],nat] =
  IF null?(l) THEN (l, 0)
  ELSE cbubblesort_aux((l,0), l`length - 1)
  ENDIF

cbubble_sort_equiv: LEMMA
  FORALL (l:list[nat]):
  bubble_sort(l) = cbubble_sort(l)`1

cbubble_sort_length: LEMMA
  FORALL (l:list[nat]): length(cbubble_sort(l)`1) = length(l)

count_cbubble_sort_ws_general: LEMMA
  FORALL (l:list[nat]): cbubble_sort(l)`2 <= (length(l) * (length(l) - 1))/2

pol2_is_quadratic: LEMMA
  member(LAMBDA(n:nat): n*(n-1)/2, Omicron(LAMBDA(n:nat):n^2))


bubble_sort_is_quadratic: LEMMA
  FORALL (l:list[nat]):
  member(LAMBDA(n:nat): cbubble_sort(l)`2, Omicron(LAMBDA(n:nat):length(l)^2 ))

END BSort
